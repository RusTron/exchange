{"version":3,"sources":["pages/Home/Home.jsx","pages/Converter/Converter.jsx","Header/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","visitImage","flexGrow","headerView","height","backgroundSize","backgroundPosition","backgroundRepeat","width","innerBlock","margin","convertButton","background","Home","classes","className","Paper","style","backgroundImage","Container","Grid","container","item","md","Button","variant","data","argument","value","Converter","valueField","argumentField","root","menuButton","marginRight","spacing","title","Header","AppBar","position","backgroundColor","Toolbar","IconButton","edge","color","aria-label","Typography","to","activeClassName","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oUAIQA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,WAAY,CACVC,SAAU,GAEZC,WAAY,CACVC,OAAQ,QACRC,eAAgB,aAChBC,mBAAoB,SACpBC,iBAAkB,YAClBC,MAAO,QAETC,WAAY,CACVL,OAAQ,QACRE,mBAAoB,SACpBI,OAAQ,eAEVC,cAAe,CACbC,WAAY,UACZ,UAAW,CACTA,WAAY,gBAKPC,EAAO,WAElB,IAAMC,EAAUhB,IAEhB,OACE,yBAAKiB,UAAWD,EAAQb,YACtB,kBAACe,EAAA,EAAD,CACED,UAAWD,EAAQX,WACnBc,MAAO,CAACC,gBAAiB,wFAEzB,yBAAKH,UAAWD,EAAQL,aACxB,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACf,kBAACC,EAAA,EAAD,CAAQT,UAAWD,EAAQH,cAAec,QAAQ,aAAlD,wB,QChCNC,G,MAAO,CACX,CAAEC,UAAW,EAAGC,MAAO,GACvB,CAAED,SAAU,EAAGC,MAAO,IACtB,CAAED,SAAU,EAAGC,MAAO,IACtB,CAAED,SAAU,EAAGC,MAAO,MAGXC,EAAY,WACvB,OACE,kBAACb,EAAA,EAAD,KACE,kBAAC,IAAD,CACEU,KAAMA,GAEN,kBAAC,IAAD,MACA,kBAAC,IAAD,MAEA,kBAAC,IAAD,CAAYI,WAAW,QAAQC,cAAc,gB,4DCf/CjC,G,MAAYC,aAAW,SAACC,GAAD,MAAY,CACvCgC,KAAM,CACJ9B,SAAU,GAEZ+B,WAAY,CACVC,YAAalC,EAAMmC,QAAQ,IAE7BC,MAAO,CACLlC,SAAU,QAIDmC,EAAS,WAEpB,IAAMvB,EAAUhB,IAEhB,OACE,yBAAKiB,UAAWD,EAAQkB,MACtB,kBAACM,EAAA,EAAD,CAAQC,SAAS,QAAQC,gBAAgB,QACvC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQ5B,UAAWD,EAAQmB,WAAYW,MAAM,UAAUC,aAAW,QACjF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYrB,QAAQ,KAAKV,UAAWD,EAAQsB,OAC1C,kBAAC,IAAD,CACEW,GAAI,aACJhC,UAAW,eACXiC,gBAAiB,eAHnB,aAOA,kBAAC,IAAD,CACED,GAAI,IACJhC,UAAW,eACXiC,gBAAiB,eAHnB,SAQF,kBAACxB,EAAA,EAAD,CAAQoB,MAAM,WAAd,aC7BKK,G,YAbH,WAEV,OACE,oCACA,kBAAC,EAAD,MACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWvC,IACjC,kBAAC,IAAD,CAAOqC,KAAK,aAAaE,UAAWvB,QCHxBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7b54b165.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Paper, Container, Grid } from '@material-ui/core';\n\n  const useStyles = makeStyles((theme) => ({\n    visitImage: {\n      flexGrow: 1,\n    },\n    headerView: {\n      height: '400px',\n      backgroundSize: '100% 600px',\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      width: '100%',\n    },\n    innerBlock: {\n      height: '300px',\n      backgroundPosition: 'center',\n      margin: '0 0 0 300px',\n    },\n    convertButton: {\n      background: \"#dce775\",\n      '&:hover': {\n        background: \"#d4e157\"\n      }\n    }\n  }));\n\nexport const Home = () => {\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.visitImage}>\n      <Paper \n        className={classes.headerView}\n        style={{backgroundImage: 'url(https://cdn.pixabay.com/photo/2018/07/23/12/05/stock-exchange-3556719_1280.jpg)'}}\n      >\n        <div className={classes.innerBlock}></div>\n        <Container>\n          <Grid container>\n            <Grid item md={6}>\n            <Button className={classes.convertButton} variant=\"contained\" >\n              Try to Convert\n            </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </Paper>\n    </div>\n  )\n}\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  ArgumentAxis,\n  ValueAxis,\n  Chart,\n  LineSeries,\n} from '@devexpress/dx-react-chart-material-ui';\nimport './Converter.scss';\n\nconst data = [\n  { argument: -1, value: 0 },\n  { argument: 1, value: 26 },\n  { argument: 2, value: 20 },\n  { argument: 3, value: 30 },\n];\n\nexport const Converter = () => {\n  return (\n    <Paper>\n      <Chart\n        data={data}\n      >\n        <ArgumentAxis />\n        <ValueAxis />\n\n        <LineSeries valueField=\"value\" argumentField=\"argument\" />\n      </Chart>\n    </Paper>\n  )\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { Button, Paper, Container, Grid } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport './Header.scss';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport const Header = () => {\n\n  const classes = useStyles();\n\n  return(\n    <div className={classes.root}>\n      <AppBar position=\"fixed\" backgroundColor=\"teal\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            <NavLink \n              to={'/converter'} \n              className={'navbar__link'}\n              activeClassName={'active-link'}\n            >\n              Converter\n            </NavLink>\n            <NavLink \n              to={'/'} \n              className={'navbar__link'}\n              activeClassName={'active-link'}\n            >\n              Home\n            </NavLink>\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Home } from './pages/Home';\nimport { Converter } from './pages/Converter';\nimport { Route, Switch } from 'react-router-dom';\nimport { Header } from './Header';\nimport 'antd/dist/antd.css'\nimport './App.scss';\n\nconst App = () => {\n\n  return (\n    <>\n    <Header />\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/converter\" component={Converter} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}